CCS PCM C Compiler, Version 4.038, 15176               09-Oct-13 10:00

               Filename: main.lst

               ROM used: 1032 words (25%)
                         Largest free fragment is 2048
               RAM used: 8 (3%) at main() level
                         47 (19%) worst case
               Stack:    3 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   3E9
0003:  NOP
.................... // Author: Kyluke McDougall 
....................  
.................... #include <16F690.h> 
.................... //////// Standard Header file for the PIC16F690 device //////////////// 
.................... #device PIC16F690 
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES HS 
.................... #FUSES INTRC_IO                 //Low power osc < 200 khz  LP 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOMCLR                   //Master Clear pin used for I/O 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES NOIESO                   //Internal External Switch Over mode disabled 
.................... #FUSES NOFCMEN                  //Fail-safe clock monitor disabled 
....................  
.................... #include "main.h" 
.................... #define A0 PIN_A0 
....................  
.................... #define DB0 PIN_C0 
.................... #define DB1 PIN_C1 
.................... #define DB2 PIN_C2 
.................... #define DB3 PIN_C3 
.................... #define DB4 PIN_C4 
.................... #define DB5 PIN_C5 
.................... #define DB6 PIN_C6 
.................... #define DB7 PIN_C7 
....................  
.................... #define VC PIN_B4 
.................... #define RS PIN_B5 
.................... #define RW PIN_B6 
.................... #define E PIN_B7 
....................  
.................... void setup(); 
.................... void setup_lcd(); 
.................... void run(); 
.................... void display(char input); 
.................... void clear(); 
....................  
....................  
.................... #use delay(clock=8000000) 
*
000A:  MOVLW  34
000B:  MOVWF  04
000C:  BCF    03.7
000D:  MOVF   00,W
000E:  BTFSC  03.2
000F:  GOTO   01D
0010:  MOVLW  02
0011:  MOVWF  21
0012:  CLRF   20
0013:  DECFSZ 20,F
0014:  GOTO   013
0015:  DECFSZ 21,F
0016:  GOTO   012
0017:  MOVLW  97
0018:  MOVWF  20
0019:  DECFSZ 20,F
001A:  GOTO   019
001B:  DECFSZ 00,F
001C:  GOTO   010
001D:  RETLW  00
....................  
.................... void main(void) 
.................... { 
*
03E9:  CLRF   04
03EA:  BCF    03.7
03EB:  MOVLW  1F
03EC:  ANDWF  03,F
03ED:  MOVLW  71
03EE:  BSF    03.5
03EF:  MOVWF  0F
03F0:  BCF    03.5
03F1:  BSF    03.6
03F2:  BCF    1F.0
03F3:  BCF    1F.1
03F4:  BCF    1F.2
03F5:  BCF    1F.3
03F6:  BCF    03.6
03F7:  BCF    1F.6
03F8:  MOVLW  00
03F9:  BSF    03.6
03FA:  MOVWF  1E
03FB:  CLRF   19
03FC:  CLRF   1A
03FD:  BSF    03.5
03FE:  CLRF   1E
03FF:  BCF    03.5
0400:  CLRF   1B
0401:  BCF    03.6
0402:  BCF    0D.5
.................... 	setup(); // Initial setup 
*
0405:  GOTO   01E
.................... 	run(); // Runs the main function 
0406:  GOTO   289
.................... } 
....................  
.................... void run () 
.................... { // Runs indefinitely 
0407:  SLEEP
....................     while (true) { 
....................         float input = 0; 
*
0289:  CLRF   27
028A:  CLRF   28
028B:  CLRF   29
028C:  CLRF   2A
.................... 		int i = 0; 
028D:  CLRF   2B
.................... 		char final [8] = "0.00"; 
028E:  MOVLW  30
028F:  MOVWF  2C
0290:  MOVLW  2E
0291:  MOVWF  2D
0292:  MOVLW  30
0293:  MOVWF  2E
0294:  MOVWF  2F
0295:  CLRF   30
0296:  CLRF   31
0297:  CLRF   32
0298:  CLRF   33
....................         input = read_adc(ADC_START_AND_READ)/218.0684; // Gets the voltage 
0299:  BSF    1F.1
029A:  BTFSC  1F.1
029B:  GOTO   29A
029C:  MOVF   1E,W
029D:  MOVWF  23
029E:  BSF    03.5
029F:  MOVF   1E,W
02A0:  BCF    03.5
02A1:  MOVWF  34
02A2:  MOVF   23,W
02A3:  MOVWF  35
02A4:  MOVF   35,W
02A5:  MOVWF  37
02A6:  MOVF   34,W
02A7:  MOVWF  36
*
02C4:  MOVF   23,W
02C5:  MOVWF  39
02C6:  MOVF   22,W
02C7:  MOVWF  38
02C8:  MOVF   21,W
02C9:  MOVWF  37
02CA:  MOVF   20,W
02CB:  MOVWF  36
02CC:  MOVLW  83
02CD:  MOVWF  3D
02CE:  MOVLW  11
02CF:  MOVWF  3C
02D0:  MOVLW  5A
02D1:  MOVWF  3B
02D2:  MOVLW  86
02D3:  MOVWF  3A
*
039D:  MOVF   23,W
039E:  MOVWF  2A
039F:  MOVF   22,W
03A0:  MOVWF  29
03A1:  MOVF   21,W
03A2:  MOVWF  28
03A3:  MOVF   20,W
03A4:  MOVWF  27
....................         sprintf(final, "%0.2f", input); 
03A5:  CLRF   26
03A6:  MOVLW  2C
03A7:  MOVWF  25
03A8:  MOVLW  C9
03A9:  MOVWF  04
03AA:  MOVF   2A,W
03AB:  MOVWF  37
03AC:  MOVF   29,W
03AD:  MOVWF  36
03AE:  MOVF   28,W
03AF:  MOVWF  35
03B0:  MOVF   27,W
03B1:  MOVWF  34
03B2:  MOVLW  02
03B3:  MOVWF  38
03B4:  GOTO   113
*
0403:  CLRF   25
0404:  CLRF   26
.................... 		clear(); 
.................... 		 
.................... 		for (i = 0; i <=3; i++) { 
*
03CD:  CLRF   2B
03CE:  MOVF   2B,W
03CF:  SUBLW  03
03D0:  BTFSS  03.0
03D1:  GOTO   3DC
.................... 			display(final[i]); 
03D2:  MOVLW  2C
03D3:  ADDWF  2B,W
03D4:  MOVWF  04
03D5:  BCF    03.7
03D6:  MOVF   00,W
03D7:  MOVWF  34
03D8:  MOVWF  35
03D9:  CALL   26E
.................... 		} 
03DA:  INCF   2B,F
03DB:  GOTO   3CE
.................... 		display("V"); 
03DC:  CLRF   34
03DD:  MOVF   34,W
03DE:  CALL   004
03DF:  IORLW  00
03E0:  BTFSC  03.2
03E1:  GOTO   3E6
03E2:  INCF   34,F
03E3:  MOVWF  35
03E4:  CALL   26E
03E5:  GOTO   3DD
....................     } 
03E6:  GOTO   289
.................... 	 
.................... } 
03E7:  BCF    0A.3
03E8:  GOTO   407 (RETURN)
....................  
.................... // Display the voltage 
.................... void display (char input) 
.................... { 
.................... 	output_c(input); 
*
026E:  BSF    03.5
026F:  CLRF   07
0270:  BCF    03.5
0271:  MOVF   35,W
0272:  MOVWF  07
.................... 	output_high(RS); 
0273:  BSF    03.5
0274:  BCF    06.5
0275:  BCF    03.5
0276:  BSF    06.5
.................... 	output_low(RW); 
0277:  BSF    03.5
0278:  BCF    06.6
0279:  BCF    03.5
027A:  BCF    06.6
.................... 	output_high(E); 
027B:  BSF    03.5
027C:  BCF    06.7
027D:  BCF    03.5
027E:  BSF    06.7
.................... 	output_low(E); 
027F:  BSF    03.5
0280:  BCF    06.7
0281:  BCF    03.5
0282:  BCF    06.7
.................... 	delay_us(40); 
0283:  MOVLW  1A
0284:  MOVWF  20
0285:  DECFSZ 20,F
0286:  GOTO   285
0287:  NOP
.................... } 
0288:  RETLW  00
....................  
.................... // Setup ports and ADC config 
.................... void setup() 
.................... { 
.................... 	SET_TRIS_C(0); // Sets PORT C to output only 
*
001E:  MOVLW  00
001F:  BSF    03.5
0020:  MOVWF  07
....................     setup_adc_ports(sAN2); 
0021:  BCF    03.5
0022:  BSF    03.6
0023:  BCF    1F.0
0024:  BCF    1F.1
0025:  BCF    1F.2
0026:  BCF    1F.3
0027:  BCF    03.6
0028:  BCF    1F.6
0029:  IORLW  04
002A:  BSF    03.6
002B:  MOVWF  1E
....................     setup_adc(adc_clock_internal); 
002C:  BSF    03.5
002D:  BCF    03.6
002E:  BSF    1F.4
002F:  BSF    1F.5
0030:  BCF    1F.6
0031:  BCF    03.5
0032:  BSF    1F.7
0033:  BSF    1F.0
....................     set_adc_channel(2); 
0034:  MOVLW  08
0035:  MOVWF  21
0036:  MOVF   1F,W
0037:  ANDLW  C3
0038:  IORWF  21,W
0039:  MOVWF  1F
....................  
.................... 	setup_lcd(); 
.................... } 
*
00C2:  BCF    0A.3
00C3:  GOTO   406 (RETURN)
....................  
.................... // Setup LCD for usage 
.................... void setup_lcd() 
.................... { 
.................... 	delay_ms(40); 
*
003A:  MOVLW  28
003B:  MOVWF  34
003C:  CALL   00A
.................... 	output_low(RS); 
003D:  BSF    03.5
003E:  BCF    06.5
003F:  BCF    03.5
0040:  BCF    06.5
.................... 	output_low(RW); 
0041:  BSF    03.5
0042:  BCF    06.6
0043:  BCF    03.5
0044:  BCF    06.6
.................... 	output_high(E); 
0045:  BSF    03.5
0046:  BCF    06.7
0047:  BCF    03.5
0048:  BSF    06.7
.................... 	output_c(56); 
0049:  BSF    03.5
004A:  CLRF   07
004B:  MOVLW  38
004C:  BCF    03.5
004D:  MOVWF  07
.................... 	output_low(E); 
004E:  BSF    03.5
004F:  BCF    06.7
0050:  BCF    03.5
0051:  BCF    06.7
.................... 	delay_us(40); 
0052:  MOVLW  1A
0053:  MOVWF  20
0054:  DECFSZ 20,F
0055:  GOTO   054
0056:  NOP
....................  
.................... 	delay_ms(40); 
0057:  MOVLW  28
0058:  MOVWF  34
0059:  CALL   00A
.................... 	output_low(RS); 
005A:  BSF    03.5
005B:  BCF    06.5
005C:  BCF    03.5
005D:  BCF    06.5
.................... 	output_low(RW); 
005E:  BSF    03.5
005F:  BCF    06.6
0060:  BCF    03.5
0061:  BCF    06.6
.................... 	output_high(E); 
0062:  BSF    03.5
0063:  BCF    06.7
0064:  BCF    03.5
0065:  BSF    06.7
.................... 	output_c(56); 
0066:  BSF    03.5
0067:  CLRF   07
0068:  MOVLW  38
0069:  BCF    03.5
006A:  MOVWF  07
.................... 	output_low(E); 
006B:  BSF    03.5
006C:  BCF    06.7
006D:  BCF    03.5
006E:  BCF    06.7
.................... 	delay_us(40); 
006F:  MOVLW  1A
0070:  MOVWF  20
0071:  DECFSZ 20,F
0072:  GOTO   071
0073:  NOP
....................  
.................... 	output_low(E); 
0074:  BSF    03.5
0075:  BCF    06.7
0076:  BCF    03.5
0077:  BCF    06.7
.................... 	output_low(RS); 
0078:  BSF    03.5
0079:  BCF    06.5
007A:  BCF    03.5
007B:  BCF    06.5
.................... 	output_low(RW); 
007C:  BSF    03.5
007D:  BCF    06.6
007E:  BCF    03.5
007F:  BCF    06.6
.................... 	output_high(E); 
0080:  BSF    03.5
0081:  BCF    06.7
0082:  BCF    03.5
0083:  BSF    06.7
.................... 	output_c(15); 
0084:  BSF    03.5
0085:  CLRF   07
0086:  MOVLW  0F
0087:  BCF    03.5
0088:  MOVWF  07
.................... 	output_low(E); 
0089:  BSF    03.5
008A:  BCF    06.7
008B:  BCF    03.5
008C:  BCF    06.7
.................... 	delay_us(40); 
008D:  MOVLW  1A
008E:  MOVWF  20
008F:  DECFSZ 20,F
0090:  GOTO   08F
0091:  NOP
....................  
.................... 	output_low(RS); 
0092:  BSF    03.5
0093:  BCF    06.5
0094:  BCF    03.5
0095:  BCF    06.5
.................... 	output_low(RW); 
0096:  BSF    03.5
0097:  BCF    06.6
0098:  BCF    03.5
0099:  BCF    06.6
.................... 	output_high(E); 
009A:  BSF    03.5
009B:  BCF    06.7
009C:  BCF    03.5
009D:  BSF    06.7
.................... 	output_c(1); 
009E:  BSF    03.5
009F:  CLRF   07
00A0:  MOVLW  01
00A1:  BCF    03.5
00A2:  MOVWF  07
.................... 	output_low(E); 
00A3:  BSF    03.5
00A4:  BCF    06.7
00A5:  BCF    03.5
00A6:  BCF    06.7
.................... 	delay_ms(2); 
00A7:  MOVLW  02
00A8:  MOVWF  34
00A9:  CALL   00A
....................  
.................... 	output_low(RS); 
00AA:  BSF    03.5
00AB:  BCF    06.5
00AC:  BCF    03.5
00AD:  BCF    06.5
.................... 	output_low(RW); 
00AE:  BSF    03.5
00AF:  BCF    06.6
00B0:  BCF    03.5
00B1:  BCF    06.6
.................... 	output_high(E); 
00B2:  BSF    03.5
00B3:  BCF    06.7
00B4:  BCF    03.5
00B5:  BSF    06.7
.................... 	output_c(6); 
00B6:  BSF    03.5
00B7:  CLRF   07
00B8:  MOVLW  06
00B9:  BCF    03.5
00BA:  MOVWF  07
.................... 	output_low(E); 
00BB:  BSF    03.5
00BC:  BCF    06.7
00BD:  BCF    03.5
00BE:  BCF    06.7
.................... 	delay_ms(200); 
00BF:  MOVLW  C8
00C0:  MOVWF  34
00C1:  CALL   00A
.................... } 
....................  
.................... // Clear the display for the LCD 
.................... void clear() 
.................... { 
.................... 	output_c(1); 
*
03B5:  BSF    03.5
03B6:  CLRF   07
03B7:  MOVLW  01
03B8:  BCF    03.5
03B9:  MOVWF  07
.................... 	output_low(RS); 
03BA:  BSF    03.5
03BB:  BCF    06.5
03BC:  BCF    03.5
03BD:  BCF    06.5
.................... 	output_low(RW); 
03BE:  BSF    03.5
03BF:  BCF    06.6
03C0:  BCF    03.5
03C1:  BCF    06.6
.................... 	output_high(E); 
03C2:  BSF    03.5
03C3:  BCF    06.7
03C4:  BCF    03.5
03C5:  BSF    06.7
.................... 	output_low(E); 
03C6:  BSF    03.5
03C7:  BCF    06.7
03C8:  BCF    03.5
03C9:  BCF    06.7
.................... 	delay_ms(2); 
03CA:  MOVLW  02
03CB:  MOVWF  34
03CC:  CALL   00A
.................... } 
....................  
.................... //              /)/) 
.................... //             ( 0 0) 
.................... //             /'-._) 
.................... //            /#/ 
.................... //           /#/	Tighty Whities (Pty) Ltd. 
.................... //          /#/		(c) 2013. For Ze Party. 

Configuration Fuses:
   Word  1: 30D4   INTRC_IO NOPROTECT NOBROWNOUT NOMCLR NOCPD NOWDT NOPUT NOIESO NOFCMEN
