CCS PCM C Compiler, Version 4.057, 4010               03-Nov-13 16:29

               Filename: main.lst

               ROM used: 371 words (10%)
                         Largest free fragment is 1792
               RAM used: 8 (3%) at main() level
                         10 (4%) worst case
               Stack:    2 locations

*
0000:  NOP
0001:  MOVLW  00
0002:  MOVWF  0A
0003:  GOTO   14C
.................... // Author: Kyluke McDougall 
....................  
.................... #include <16F690.h> 
.................... //////// Standard Header file for the PIC16F690 device //////////////// 
.................... #device PIC16F690 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES HS 
.................... #FUSES INTRC_IO                 //Low power osc < 200 khz  LP 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOMCLR                   //Master Clear pin used for I/O 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES NOIESO                   //Internal External Switch Over mode disabled 
.................... #FUSES NOFCMEN                  //Fail-safe clock monitor disabled 
....................  
.................... #include "main.h" 
.................... #define A0 PIN_A0 
....................  
.................... #define DB0 PIN_C0 
.................... #define DB1 PIN_C1 
.................... #define DB2 PIN_C2 
.................... #define DB3 PIN_C3 
.................... #define DB4 PIN_C4 
.................... #define DB5 PIN_C5 
.................... #define DB6 PIN_C6 
.................... #define DB7 PIN_C7 
....................  
.................... #define VC PIN_B4 
.................... #define RS PIN_A2 
.................... #define RW PIN_B6 
.................... #define E PIN_A4 
....................  
.................... int new_line = 0; 
*
016E:  CLRF   25
.................... int clear_line = 0; 
016F:  CLRF   26
....................  
.................... void setup(); 
.................... void setup_lcd(); 
.................... void run(); 
.................... void display(char input); 
.................... void clear(); 
.................... void next_line(); 
....................  
....................  
.................... #use delay(clock=8000000) 
*
0034:  MOVLW  28
0035:  MOVWF  04
0036:  BCF    03.7
0037:  MOVF   00,W
0038:  BTFSC  03.2
0039:  GOTO   047
003A:  MOVLW  02
003B:  MOVWF  21
003C:  CLRF   20
003D:  DECFSZ 20,F
003E:  GOTO   03D
003F:  DECFSZ 21,F
0040:  GOTO   03C
0041:  MOVLW  97
0042:  MOVWF  20
0043:  DECFSZ 20,F
0044:  GOTO   043
0045:  DECFSZ 00,F
0046:  GOTO   03A
0047:  RETLW  00
.................... #use rs232(baud=9600, xmit=PIN_B7, rcv=PIN_B5) 
....................  
.................... void main(void) 
.................... { 
*
014C:  CLRF   04
014D:  BCF    03.7
014E:  MOVLW  1F
014F:  ANDWF  03,F
0150:  MOVLW  71
0151:  BSF    03.5
0152:  MOVWF  0F
0153:  MOVF   0F,W
0154:  BCF    1B.3
0155:  MOVLW  0C
0156:  MOVWF  19
0157:  MOVLW  A2
0158:  MOVWF  18
0159:  MOVLW  90
015A:  BCF    03.5
015B:  MOVWF  18
015C:  BSF    03.6
015D:  BCF    1F.0
015E:  BCF    1F.1
015F:  BCF    1F.2
0160:  BCF    1F.3
0161:  BCF    03.6
0162:  BCF    1F.6
0163:  MOVLW  00
0164:  BSF    03.6
0165:  MOVWF  1E
0166:  CLRF   19
0167:  CLRF   1A
0168:  BSF    03.5
0169:  CLRF   1E
016A:  BCF    03.5
016B:  CLRF   1B
016C:  BCF    03.6
016D:  BCF    0D.5
.................... 	setup(); // Initial setup 
*
0170:  GOTO   048
.................... 	run(); // Runs the main function 
0171:  GOTO   0D7
.................... } 
....................  
.................... void run () 
.................... { // Runs indefinitely 
0172:  GOTO   172
....................      
....................     char test; 
.................... 	 
.................... 	// Prints initial output 
....................     printf("Tutorial 8 -> Kyluke McDougall - 211213020\n"); 
*
00D7:  CLRF   28
00D8:  MOVF   28,W
00D9:  CALL   004
00DA:  INCF   28,F
00DB:  MOVWF  20
00DC:  MOVF   20,W
00DD:  BTFSS  0C.4
00DE:  GOTO   0DD
00DF:  MOVWF  19
00E0:  MOVLW  2B
00E1:  SUBWF  28,W
00E2:  BTFSS  03.2
00E3:  GOTO   0D8
....................      
.................... 	// Runs indefinitely to capture output 
....................     while(true) 
....................     { 
....................        test = getc(); // Capture keyboard input 
00E4:  BTFSS  0C.5
00E5:  GOTO   0E4
00E6:  MOVF   1A,W
00E7:  MOVWF  27
....................        putc(test); 
00E8:  MOVF   27,W
00E9:  BTFSS  0C.4
00EA:  GOTO   0E9
00EB:  MOVWF  19
.................... 		 
.................... 		// Check if a line is not filled 
.................... 	   if (new_line != 8) { 
00EC:  MOVF   25,W
00ED:  SUBLW  08
00EE:  BTFSC  03.2
00EF:  GOTO   10E
.................... 	   		display(test); // Display character pressed 
00F0:  MOVF   27,W
00F1:  MOVWF  28
.................... 			new_line++; 
*
010C:  INCF   25,F
.................... 		} 
.................... 		// If a line is filled, move to the next one 
.................... 	   else { 
010D:  GOTO   149
.................... 			// If the last line is not being used yet 
.................... 			if (clear_line != 1){ 
010E:  DECFSZ 26,W
010F:  GOTO   111
0110:  GOTO   12E
.................... 				clear_line = 1; 
0111:  MOVLW  01
0112:  MOVWF  26
.................... 				new_line = 0; 
0113:  CLRF   25
.................... 				next_line(); 
.................... 			} 
.................... 			// If the last line is full, clear the LCD 
.................... 			else { 
*
012D:  GOTO   149
.................... 				clear_line = 0; 
012E:  CLRF   26
.................... 				new_line = 0; 
012F:  CLRF   25
.................... 				clear(); 
.................... 			} 
.................... 		} 
....................     } 
*
0149:  GOTO   0E4
.................... }      
014A:  BCF    0A.3
014B:  GOTO   172 (RETURN)
....................  
.................... // Display the character onto the LCD 
.................... void display (char input) 
.................... { 
.................... 	output_c(input); 
*
00F2:  BSF    03.5
00F3:  CLRF   07
00F4:  BCF    03.5
00F5:  MOVF   28,W
00F6:  MOVWF  07
.................... 	output_high(RS); 
00F7:  BSF    03.5
00F8:  BCF    05.2
00F9:  BCF    03.5
00FA:  BSF    05.2
.................... 	output_low(RW); 
00FB:  BSF    03.5
00FC:  BCF    06.6
00FD:  BCF    03.5
00FE:  BCF    06.6
.................... 	output_high(E); 
00FF:  BSF    03.5
0100:  BCF    05.4
0101:  BCF    03.5
0102:  BSF    05.4
.................... 	output_low(E); 
0103:  BSF    03.5
0104:  BCF    05.4
0105:  BCF    03.5
0106:  BCF    05.4
.................... 	delay_us(40); 
0107:  MOVLW  1A
0108:  MOVWF  20
0109:  DECFSZ 20,F
010A:  GOTO   109
010B:  NOP
.................... } 
....................  
.................... // Setup ports and ADC config 
.................... void setup() 
.................... { 
.................... 	SET_TRIS_C(0); // Sets PORT C to output only 
*
0048:  MOVLW  00
0049:  BSF    03.5
004A:  MOVWF  07
....................  
.................... 	setup_lcd(); 
.................... } 
*
00D5:  BCF    0A.3
00D6:  GOTO   171 (RETURN)
....................  
.................... // Setup LCD for usage 
.................... void setup_lcd() 
.................... { 
.................... 	delay_ms(40); 
*
004B:  MOVLW  28
004C:  BCF    03.5
004D:  MOVWF  28
004E:  CALL   034
.................... 	output_low(RS); 
004F:  BSF    03.5
0050:  BCF    05.2
0051:  BCF    03.5
0052:  BCF    05.2
.................... 	output_low(RW); 
0053:  BSF    03.5
0054:  BCF    06.6
0055:  BCF    03.5
0056:  BCF    06.6
.................... 	output_high(E); 
0057:  BSF    03.5
0058:  BCF    05.4
0059:  BCF    03.5
005A:  BSF    05.4
.................... 	output_c(56); 
005B:  BSF    03.5
005C:  CLRF   07
005D:  MOVLW  38
005E:  BCF    03.5
005F:  MOVWF  07
.................... 	output_low(E); 
0060:  BSF    03.5
0061:  BCF    05.4
0062:  BCF    03.5
0063:  BCF    05.4
.................... 	delay_us(40); 
0064:  MOVLW  1A
0065:  MOVWF  20
0066:  DECFSZ 20,F
0067:  GOTO   066
0068:  NOP
....................  
.................... 	delay_ms(40); 
0069:  MOVLW  28
006A:  MOVWF  28
006B:  CALL   034
.................... 	output_low(RS); 
006C:  BSF    03.5
006D:  BCF    05.2
006E:  BCF    03.5
006F:  BCF    05.2
.................... 	output_low(RW); 
0070:  BSF    03.5
0071:  BCF    06.6
0072:  BCF    03.5
0073:  BCF    06.6
.................... 	output_high(E); 
0074:  BSF    03.5
0075:  BCF    05.4
0076:  BCF    03.5
0077:  BSF    05.4
.................... 	output_c(56); 
0078:  BSF    03.5
0079:  CLRF   07
007A:  MOVLW  38
007B:  BCF    03.5
007C:  MOVWF  07
.................... 	output_low(E); 
007D:  BSF    03.5
007E:  BCF    05.4
007F:  BCF    03.5
0080:  BCF    05.4
.................... 	delay_us(40); 
0081:  MOVLW  1A
0082:  MOVWF  20
0083:  DECFSZ 20,F
0084:  GOTO   083
0085:  NOP
....................  
.................... 	output_low(E); 
0086:  BSF    03.5
0087:  BCF    05.4
0088:  BCF    03.5
0089:  BCF    05.4
.................... 	output_low(RS); 
008A:  BSF    03.5
008B:  BCF    05.2
008C:  BCF    03.5
008D:  BCF    05.2
.................... 	output_low(RW); 
008E:  BSF    03.5
008F:  BCF    06.6
0090:  BCF    03.5
0091:  BCF    06.6
.................... 	output_high(E); 
0092:  BSF    03.5
0093:  BCF    05.4
0094:  BCF    03.5
0095:  BSF    05.4
.................... 	output_c(15); 
0096:  BSF    03.5
0097:  CLRF   07
0098:  MOVLW  0F
0099:  BCF    03.5
009A:  MOVWF  07
.................... 	output_low(E); 
009B:  BSF    03.5
009C:  BCF    05.4
009D:  BCF    03.5
009E:  BCF    05.4
.................... 	delay_us(40); 
009F:  MOVLW  1A
00A0:  MOVWF  20
00A1:  DECFSZ 20,F
00A2:  GOTO   0A1
00A3:  NOP
....................  
.................... 	output_low(RS); 
00A4:  BSF    03.5
00A5:  BCF    05.2
00A6:  BCF    03.5
00A7:  BCF    05.2
.................... 	output_low(RW); 
00A8:  BSF    03.5
00A9:  BCF    06.6
00AA:  BCF    03.5
00AB:  BCF    06.6
.................... 	output_high(E); 
00AC:  BSF    03.5
00AD:  BCF    05.4
00AE:  BCF    03.5
00AF:  BSF    05.4
.................... 	output_c(1); 
00B0:  BSF    03.5
00B1:  CLRF   07
00B2:  MOVLW  01
00B3:  BCF    03.5
00B4:  MOVWF  07
.................... 	output_low(E); 
00B5:  BSF    03.5
00B6:  BCF    05.4
00B7:  BCF    03.5
00B8:  BCF    05.4
.................... 	delay_ms(2); 
00B9:  MOVLW  02
00BA:  MOVWF  28
00BB:  CALL   034
....................  
.................... 	output_low(RS); 
00BC:  BSF    03.5
00BD:  BCF    05.2
00BE:  BCF    03.5
00BF:  BCF    05.2
.................... 	output_low(RW); 
00C0:  BSF    03.5
00C1:  BCF    06.6
00C2:  BCF    03.5
00C3:  BCF    06.6
.................... 	output_high(E); 
00C4:  BSF    03.5
00C5:  BCF    05.4
00C6:  BCF    03.5
00C7:  BSF    05.4
.................... 	output_c(6); 
00C8:  BSF    03.5
00C9:  CLRF   07
00CA:  MOVLW  06
00CB:  BCF    03.5
00CC:  MOVWF  07
.................... 	output_low(E); 
00CD:  BSF    03.5
00CE:  BCF    05.4
00CF:  BCF    03.5
00D0:  BCF    05.4
.................... 	delay_ms(200); 
00D1:  MOVLW  C8
00D2:  MOVWF  28
00D3:  CALL   034
00D4:  NOP
.................... } 
....................  
.................... // Clear the display for the LCD 
.................... void clear() 
.................... { 
.................... 	output_c(1); 
*
0130:  BSF    03.5
0131:  CLRF   07
0132:  MOVLW  01
0133:  BCF    03.5
0134:  MOVWF  07
.................... 	output_low(RS); 
0135:  BSF    03.5
0136:  BCF    05.2
0137:  BCF    03.5
0138:  BCF    05.2
.................... 	output_low(RW); 
0139:  BSF    03.5
013A:  BCF    06.6
013B:  BCF    03.5
013C:  BCF    06.6
.................... 	output_high(E); 
013D:  BSF    03.5
013E:  BCF    05.4
013F:  BCF    03.5
0140:  BSF    05.4
.................... 	output_low(E); 
0141:  BSF    03.5
0142:  BCF    05.4
0143:  BCF    03.5
0144:  BCF    05.4
.................... 	delay_ms(2); 
0145:  MOVLW  02
0146:  MOVWF  28
0147:  CALL   034
0148:  NOP
.................... } 
....................  
.................... // Jump to the next line on the LCD 
.................... void next_line() 
.................... { 
.................... 	output_c(192); 
*
0114:  BSF    03.5
0115:  CLRF   07
0116:  MOVLW  C0
0117:  BCF    03.5
0118:  MOVWF  07
.................... 	output_low(RS); 
0119:  BSF    03.5
011A:  BCF    05.2
011B:  BCF    03.5
011C:  BCF    05.2
.................... 	output_low(RW); 
011D:  BSF    03.5
011E:  BCF    06.6
011F:  BCF    03.5
0120:  BCF    06.6
.................... 	output_high(E); 
0121:  BSF    03.5
0122:  BCF    05.4
0123:  BCF    03.5
0124:  BSF    05.4
.................... 	output_low(E); 
0125:  BSF    03.5
0126:  BCF    05.4
0127:  BCF    03.5
0128:  BCF    05.4
.................... 	delay_ms(2); 
0129:  MOVLW  02
012A:  MOVWF  28
012B:  CALL   034
012C:  NOP
.................... } 
....................  
.................... //              /)/) 
.................... //             ( 0 0) 
.................... //             /'-._) 
.................... //            /#/ 
.................... //           /#/	Tighty Whities (Pty) Ltd. 
.................... //          /#/		(c) 2013. For Ze Party. 

Configuration Fuses:
   Word  1: 30D4   INTRC_IO NOPROTECT NOBROWNOUT NOMCLR NOCPD NOWDT NOPUT NOIESO NOFCMEN
